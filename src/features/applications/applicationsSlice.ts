import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { fetchApplication, fetchApplicationData } from "./applicationsAPI";
import { ApplicationType } from "./applicationType";

export type Application = {
  applications: string[];
  application: ApplicationType[];
  status: "idle" | "loading" | "failed";
};

const initialState: Application = {
  applications: [],
  application: [],
  status: "idle",
};
export const applicationsListAsync = createAsyncThunk(
  "applications/fetchApplication",
  async () => {
    const response = await fetchApplication();
    return response;
  }
);

export const applicationsAsync = createAsyncThunk(
  "applications/fetchApplicationData",
  async (application: string | null) => {
    const response = await fetchApplicationData(application);
    const data = response.map((resp: any) => {
      const tags = resp?.Tags;
      delete resp?.Tags;
      return {
        ...resp,
        appName: tags["app-name"],
        environment: tags.environment,
        businessUnit: tags["business-unit"],
      };
    });
    return data;
  }
);

export const applicationsSlice = createSlice({
  name: "applications",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(applicationsListAsync.pending, (state) => {
        state.status = "loading";
        state.applications = [];
      })
      .addCase(applicationsListAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.applications = action.payload;
      })
      .addCase(applicationsListAsync.rejected, (state) => {
        state.status = "failed";
        state.applications = [];
      })
      .addCase(applicationsAsync.pending, (state) => {
        state.status = "loading";
        state.application = [];
      })
      .addCase(applicationsAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.application = action.payload;
      })
      .addCase(applicationsAsync.rejected, (state) => {
        state.status = "failed";
        state.application = [];
      });
  },
});
export const applications = (state: RootState) => state.applications;
export default applicationsSlice.reducer;
