import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { fetchResource, fetchResourceData } from "./resourcesAPI";
import { ResourceType } from "./resourcesType";

export type Resources = {
  resources: string[];
  resource: ResourceType[];
  status: "idle" | "loading" | "failed";
};

const initialState: Resources = {
  resources: [],
  resource: [],
  status: "idle",
};
export const resourcesListAsync = createAsyncThunk(
  "resources/fetchResources",
  async () => {
    const response = await fetchResource();
    return response;
  }
);

export const resourcesAsync = createAsyncThunk(
  "resources/fetchResourceData",
  async (resource: string | null) => {
    const response = await fetchResourceData(resource);
    const data = response.map((resp: any) => {
      const tags = resp?.Tags;
      delete resp?.Tags;
      return {
        ...resp,
        appName: tags["app-name"],
        environment: tags.environment,
        businessUnit: tags["business-unit"],
      };
    });
    return data;
  }
);

export const resourcesSlice = createSlice({
  name: "resources",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(resourcesListAsync.pending, (state) => {
        state.status = "loading";
        state.resources = [];
      })
      .addCase(resourcesListAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.resources = action.payload;
      })
      .addCase(resourcesListAsync.rejected, (state) => {
        state.status = "failed";
        state.resources = [];
      })
      .addCase(resourcesAsync.pending, (state) => {
        state.status = "loading";
        state.resource = [];
      })
      .addCase(resourcesAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.resource = action.payload;
      })
      .addCase(resourcesAsync.rejected, (state) => {
        state.status = "failed";
        state.resource = [];
      });
  },
});

export const resources = (state: RootState) => state.resources;
export default resourcesSlice.reducer;
